use ark_ec::{twisted_edwards::Projective, CurveGroup};
use ark_serialize::{CanonicalDeserialize, CanonicalSerialize};
use itertools::Itertools;
use k256::ecdsa::SigningKey;
use num_bigint::BigUint;
use num_traits::Num;
use renegade_crypto::hash::Poseidon2Sponge;
use serde::{de::Error as SerdeErr, Deserialize, Deserializer, Serializer};

use crate::{
    circuit_types::{
        elgamal::BabyJubJubPoint,
        keychain::{NonNativeScalar, PublicSigningKey},
    },
    common::types::Wallet,
    external_api::types::ApiWallet,
    types::{biguint_to_scalar, scalar_to_biguint, Scalar},
};

// --------
// | Hash |
// --------

/// Compute the hash of the randomness of a given wallet
pub fn compute_poseidon_hash(values: &[Scalar]) -> Scalar {
    let input_seq = values.iter().map(Scalar::inner).collect_vec();
    let mut hasher = Poseidon2Sponge::new();
    let res = hasher.hash(&input_seq);

    Scalar::new(res)
}

/// Compute a chained Poseidon hash of the given length from the given seed
pub fn evaluate_hash_chain(seed: Scalar, length: usize) -> Vec<Scalar> {
    let mut seed = seed.inner();
    let mut res = Vec::with_capacity(length);

    for _ in 0..length {
        // Create a new hasher to reset the internal state
        let mut hasher = Poseidon2Sponge::new();
        seed = hasher.hash(&[seed]);

        res.push(Scalar::new(seed));
    }

    res
}

/// A hash chain from a seed used to compute CSPRNG values
pub struct PoseidonCSPRNG {
    /// The seed of the CSPRNG, this is chained into a hash function
    /// to give pseudorandom values
    state: Scalar,
}

impl PoseidonCSPRNG {
    /// Constructor
    pub fn new(seed: Scalar) -> Self {
        Self { state: seed }
    }
}

impl Iterator for PoseidonCSPRNG {
    type Item = Scalar;

    fn next(&mut self) -> Option<Self::Item> {
        let hash_res = compute_poseidon_hash(&[self.state]);
        self.state = hash_res;

        Some(hash_res)
    }
}

// -------
// | Hex |
// -------

/// Convert a byte array to a hex string
pub fn bytes_to_hex_string(bytes: &[u8]) -> String {
    let encoded = hex::encode(bytes);
    format!("0x{encoded}")
}

/// Convert a hex string to a byte array
pub fn bytes_from_hex_string(hex: &str) -> Result<Vec<u8>, String> {
    let hex = hex.strip_prefix("0x").unwrap_or(hex);
    hex::decode(hex).map_err(|e| format!("error deserializing bytes from hex string: {e}"))
}

/// A helper to serialize a BigUint to a hex string
pub fn biguint_to_hex_string(val: &BigUint) -> String {
    format!("0x{}", val.to_str_radix(16 /* radix */))
}

/// A helper to deserialize a BigUint from a hex string
pub fn biguint_from_hex_string(hex: &str) -> Result<BigUint, String> {
    // Deserialize as a string and remove "0x" if present
    let stripped = hex.strip_prefix("0x").unwrap_or(hex);
    BigUint::from_str_radix(stripped, 16 /* radix */)
        .map_err(|e| format!("error deserializing BigUint from hex string: {e}"))
}

/// A helper to serialize a scalar to a hex string
pub fn scalar_to_hex_string(val: &Scalar) -> String {
    let biguint = scalar_to_biguint(val);
    biguint_to_hex_string(&biguint)
}

/// A helper to deserialize a scalar from a hex string
pub fn scalar_from_hex_string(hex: &str) -> Result<Scalar, String> {
    let biguint = biguint_from_hex_string(hex)?;
    Ok(biguint_to_scalar(&biguint))
}

/// A helper to serialize a nonnative scalar to a hex string
pub fn nonnative_scalar_to_hex_string<const NUM_WORDS: usize>(
    val: &NonNativeScalar<NUM_WORDS>,
) -> String {
    biguint_to_hex_string(&val.into())
}

/// A helper method to deserialize a nonnative scalar from a hex string
pub fn nonnative_scalar_from_hex_string<const NUM_WORDS: usize>(
    hex: &str,
) -> Result<NonNativeScalar<NUM_WORDS>, String> {
    let biguint = biguint_from_hex_string(hex)?;
    Ok(NonNativeScalar::from(&biguint))
}

/// A helper to serialize a signing key to a hex string
pub fn public_sign_key_to_hex_string(val: &PublicSigningKey) -> String {
    let bytes = val.to_uncompressed_bytes();
    format!("0x{}", hex::encode(bytes))
}

/// A helper to deserialize a signing key from a hex string
pub fn public_sign_key_from_hex_string(hex: &str) -> Result<PublicSigningKey, String> {
    // Deserialize as a string and remove "0x" if present
    let stripped = hex.strip_prefix("0x").unwrap_or(hex);
    let bytes = hex::decode(stripped)
        .map_err(|e| format!("error deserializing bytes from hex string: {e}"))?;

    PublicSigningKey::from_bytes(&bytes)
        .map_err(|e| format!("error deserializing signing key from bytes: {e}"))
}

/// The config of the embedded curve
pub type EmbeddedCurveConfig = ark_ed_on_bn254::EdwardsConfig;
/// Convert a Baby-JubJub point to a hex string
pub fn jubjub_to_hex_string(point: &BabyJubJubPoint) -> String {
    let converted_point = Projective::<EmbeddedCurveConfig>::from(*point);
    let mut bytes = vec![];
    converted_point
        .into_affine()
        .serialize_uncompressed(&mut bytes)
        .unwrap();

    format!("0x{}", hex::encode(bytes))
}

/// Deserialize a Baby-JubJub point from a hex string
pub fn jubjub_from_hex_string(hex: &str) -> Result<BabyJubJubPoint, String> {
    // Deserialize as a string and remove "0x" if present
    let stripped = hex.strip_prefix("0x").unwrap_or(hex);
    let bytes = hex::decode(stripped)
        .map_err(|e| format!("error deserializing bytes from hex string: {e}"))?;

    let projective = Projective::<EmbeddedCurveConfig>::deserialize_uncompressed(bytes.as_slice())
        .map_err(|e| format!("error deserializing projective point from bytes: {:?}", e))?;
    Ok(projective.into())
}

/// A helper to serialize a BigUint to a hex string
pub fn serialize_biguint_to_hex_string<S>(val: &BigUint, serializer: S) -> Result<S::Ok, S::Error>
where
    S: Serializer,
{
    let hex = biguint_to_hex_string(val);
    serializer.serialize_str(&hex)
}

/// A helper to deserialize a BigUint from a hex string
pub fn deserialize_biguint_from_hex_string<'de, D>(deserializer: D) -> Result<BigUint, D::Error>
where
    D: Deserializer<'de>,
{
    let hex = String::deserialize(deserializer)?;
    biguint_from_hex_string(&hex).map_err(D::Error::custom)
}

// ---------------
// | Signing Key |
// ---------------
pub fn derive_signing_key_from_hex(sk_root: &str) -> Result<SigningKey, String> {
    let key_bigint = biguint_from_hex_string(sk_root).map_err(|e| e.to_string())?;
    SigningKey::from_slice(&key_bigint.to_bytes_be()).map_err(|e| e.to_string())
}

pub fn hex_to_signing_key(hex: &str) -> Result<SigningKey, String> {
    let stripped = hex.strip_prefix("0x").unwrap_or(hex);
    let padded = if stripped.len() < 64 {
        format!("{:0>64}", stripped)
    } else {
        stripped.to_string()
    };
    let bytes = hex::decode(padded).map_err(|e| e.to_string())?;
    SigningKey::from_slice(&bytes).map_err(|e| e.to_string())
}

// -----------------
// | Wallet Helpers |
// -----------------

/// Deserializes a JSON string into a `Wallet` object.
pub fn deserialize_wallet(wallet_str: &str) -> Wallet {
    let deserialized_wallet: ApiWallet = serde_json::from_reader(wallet_str.as_bytes()).unwrap();
    deserialized_wallet.try_into().unwrap()
}

/// Macro for serializing Rust types to JavaScript values
#[macro_export]
macro_rules! serialize_to_js {
    ($expr:expr) => {
        serde_json::to_string(&$expr)
            .map(|result| JsValue::from_str(&result))
            .map_err(|e| JsError::new(&e.to_string()))
    };
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_deserialize_wallet() {
        let wallet_str = r#"{"id":"c9378d6a-b4e9-45b2-b98a-13c79de209cd","balances":[{"mint":"0x4af567288e68cad4aa93a272fe6139ca53859c70","amount":9000000000000000000,"relayer_fee_balance":0,"protocol_fee_balance":0},{"mint":"0x8e1308925a26cb5cf400afb402d67b3523473379","amount":3000000000000000000,"relayer_fee_balance":0,"protocol_fee_balance":0},{"mint":"0x1d55838a9ec169488d360783d65e6cd985007b72","amount":3808161837198978355816,"relayer_fee_balance":0,"protocol_fee_balance":0},{"mint":"0x0","amount":0,"relayer_fee_balance":0,"protocol_fee_balance":0},{"mint":"0x0","amount":0,"relayer_fee_balance":0,"protocol_fee_balance":0}],"orders":[{"id":"57451a3f-0bd8-43b9-af04-05b494488900","base_mint":"0x4af567288e68cad4aa93a272fe6139ca53859c70","quote_mint":"0x1d55838a9ec169488d360783d65e6cd985007b72","side":"Buy","type":"Midpoint","amount":1000000000000000000,"minimum_amount":null,"worst_case_price":"4503599627370496"},{"id":"02094c68-aa9b-46df-8c54-8528a11cf0a9","base_mint":"0x0","quote_mint":"0x0","side":"Buy","type":"Midpoint","amount":0,"minimum_amount":null,"worst_case_price":"0"},{"id":"2921af94-66bd-4768-a3ae-26dce5c51e5e","base_mint":"0x0","quote_mint":"0x0","side":"Buy","type":"Midpoint","amount":0,"minimum_amount":null,"worst_case_price":"0"},{"id":"5b9eea38-0d4a-4656-b98d-ec8b4cec3651","base_mint":"0x0","quote_mint":"0x0","side":"Buy","type":"Midpoint","amount":0,"minimum_amount":null,"worst_case_price":"0"},{"id":"a0c45ea0-9a5c-415a-a1cf-471be6bea917","base_mint":"0x0","quote_mint":"0x0","side":"Buy","type":"Midpoint","amount":0,"minimum_amount":null,"worst_case_price":"0"}],"key_chain":{"public_keys":{"pk_root":"0x0412c811977164429a00bb47cd8c9f01bef8473b0d2b8845ddb37c873233fce6fa6dd554dd2249918035d77692c0e8c5c008bce3ac56db264f701f9d3f5608e91b","pk_match":"0x1917553523c7ac3babba8ce6beac42888e952e38554348290ee492da5661d9cc"},"private_keys":{"sk_root":"0x6a6e3bfa1289e075c2cbbc9839b6e70d293f518e199316f16df60d059b348941","sk_match":"0x190237393aca1573c198a349ade7154cda2d3c2f361960aef0906352c2cb2ee5"}},"managing_cluster":"0xf5cb5b416fc545ee13163d38efc7f924f6f322233ec890dea269cb6ba8673226555fee03d18611b95efc9efab041aa4fb9c84fbf1f904037a842587479a2632a","match_fee":"8589934","blinded_public_shares":[[2024099596,2283622370,3373844387,3699225673,620365783,3616710419,3216809818,637167776],[3346402507,1997625821,3016310437,2061430707,2710254684,2558343763,3563986750,21037964],[1239964448,2330717746,3269894279,1608182849,4214242023,2900606234,3707022545,188253388],[348229254,1259151624,2774848289,3164415493,1366354724,245564652,2604703992,618521913],[850549311,1736122735,1312877726,3509295176,1126509314,827832022,459337343,193187863],[1948196524,1822855039,1209188594,3518138712,759881151,2938784293,4154874605,488613855],[1290160068,1876378430,1644623650,1388801348,828738404,1418665385,4123532292,283686066],[623950372,667130122,785474757,221780956,3239384809,250435065,2108799147,79388302],[1015884396,1020242737,3278516014,3129734041,581954895,2917408653,1227463037,767203897],[2064363123,1029299003,3115989797,2040914616,653708234,3350504366,2050961628,454387438],[3753117299,2007863504,739723825,2226099214,1173697653,1209052418,2887361517,637245571],[791931069,130075134,640030121,183570363,4070611108,2904076862,1802796448,177908598],[1817158290,2922927151,2879581373,2398983206,1973651319,2436941197,772583078,596213489],[526367336,1903547495,503709422,4042342713,1433335376,966344086,3720665675,69828250],[2907928696,4270583383,243251784,540382331,2765294722,3797192312,3576107301,277000872],[4242304471,1247705319,1471122147,1945163245,1747708545,1219125453,743827448,3396072],[3650520311,3369589260,1448526940,3854279310,2645240155,1074930590,3615648176,219700906],[1894825921,2546631470,3067737329,1186290711,2052892429,2844607738,3210030988,403303261],[1095231414,3893603491,1230878684,1901804403,3181790476,2745587331,2279096492,122681975],[1693821018,3679896823,2933571633,3251657893,1396133513,1713975412,3986617904,175101551],[2641248166,3031082908,1649672751,724910571,4029570651,1801337265,2734821062,123649388],[673994573,340717208,2758319387,1476459915,1973059187,4193749863,2746695559,484397652],[3552299441,3406844115,2536057439,3156053548,3311084209,863341429,1172282615,28905330],[2354833291,3560056596,1243244870,939842521,3686212360,4010927497,4039754214,375553231],[323447132,891470305,1222706381,590372408,2941282794,3962409641,3122467172,730847627],[3169663710,2211480912,1178027760,3641821768,2460641176,456211548,2848183498,365648393],[1286138537,225759036,2414963756,1257268685,217370270,1948429709,2816471676,110773611],[2455271390,3605533149,3274509536,3864800348,2850286283,1953454869,2364403450,803384340],[337249133,1199182626,4103530960,4176904884,1819218393,2614880304,1448143952,725497942],[3663412477,2190885965,1421488934,2405514506,785816519,3166124161,1831469090,586689683],[3946901763,2993255964,1759429385,2928921793,873210982,1993233404,2619987582,713987998],[1598092270,765980635,3710611955,1395122898,2982537706,2782054079,674059437,676978081],[2583239667,269181666,1911549991,1723845708,2552834775,664573821,3067409224,652647832],[1863829751,1504905478,2989125167,3487558353,2018438433,1451009710,2670251310,328977636],[908245063,2123754547,2920914567,2833721303,833426648,1911021207,3869614467,458377340],[188912296,813502033,40718708,4156389947,4061662294,3860994484,1294556848,481777814],[3186143629,2385023669,328092127,3185083038,3042498002,137201946,3244007638,562041684],[1112121528,2155902206,3331612981,1029526540,432911929,1936907261,112253963,350450020],[4252898288,2403404439,3923783269,2899635304,1945260797,1222177906,254588869,26821709],[2487650637,4200629267,2181540405,3752743105,1694866018,1489431679,709484654,628634349],[3492292745,785064544,342333694,514458633,2657985224,716051637,1993603512,385982051],[1211387494,692713803,2228726096,3650126440,1231149223,117006954,1763059095,35999192],[1514152140,3070734348,2649726968,1532278427,3665041207,2716893516,675144989,111694085],[3795898097,1412859154,1258124266,1757386457,3506991772,2829351418,2039189684,553672373],[789305044,1093264746,2516262273,669754858,354921762,1613149781,2679642416,199860293],[1625879483,2062227090,1099433950,2947443930,959509800,3573131062,88513690,513919979],[1957734510,2687469157,1246790133,3988101934,3704169322,1324566290,244369306,582922809],[2411092608,1158913049,3985203922,3490350081,2334699934,4030707402,4232688714,658870815],[2667276066,2004291287,903764519,414782682,2528879049,2282715232,2831326304,728654318],[397904404,3639312758,244800416,1906935184,2360453111,2691545103,3687342573,345220470],[2372229120,1243486321,2068219909,345048652,1805549381,3321140700,1635268615,295904524],[3597567080,945288549,3482696553,3020381516,168389121,2015523156,218714887,481073922],[1078187132,650118843,814067017,805718199,4144366824,1231980325,2289302333,781984129],[2198365136,3544029846,1866172406,4071523185,3370348284,3081692867,4147378543,577076581]],"private_shares":[[3326966370,4292767221,2370342860,114355725,1129453297,265896589,2041354418,323672654],[377167922,1267572973,2118845895,2983395206,4199164646,2526962069,2211018916,127922415],[2709836254,4272854491,3907458165,4111133504,572947640,982000773,1551141691,772587042],[3601571448,1049453317,107536860,2554900861,3420834939,3637042355,2653460244,342318517],[3691120184,620092883,1368225811,3722513047,1749325103,3054774986,503859597,767652568],[1836715602,1184241833,1673196555,2201177642,4027308512,943822714,1103289631,472226575],[2659640634,432226511,1237761499,35547710,3958451260,2463941622,1134631944,677154364],[3594285785,502592879,54714279,528077662,3670034522,539903471,3666206520,69572077],[870350340,589907382,1972997459,958090545,402410971,965198355,4030701199,193636533],[2490241267,3172814655,4061362854,3678401737,4133481429,532102641,3207202608,506452992],[196683403,300741437,2142661324,3493217140,3613492010,2673554589,2370802719,323594859],[3157869633,2178529807,2242355028,1240778695,716578556,978530145,3455367788,782931832],[2132642412,3680645086,2803775,3320333148,2813538344,1445665810,190613862,364626942],[3691868821,3561142802,336479613,1002483201,1181116658,4118961747,2054339991,79132129],[1041872006,2332988854,2639133364,883966727,2021894942,85414695,1682056935,683839558],[4270898982,4216984977,3664034184,3099662668,866743489,3866180380,736210922,145564308],[299280391,3233982977,1433858208,1865037044,2141949508,2807676417,1642516060,741139524],[2054974781,4056940767,4109615115,238058346,2734297235,1037999269,2048133248,557537169],[3123004743,1571086806,3904277647,3143021510,3727628854,2339718501,3495909174,26278404],[2255979684,2923675414,4243780811,2467658460,3391056150,2168631595,1271546332,785738879],[3808389321,1735152566,1559644608,2688423575,3371992178,3283968567,3040184604,25310991],[382104097,1940705088,2985867861,2337121483,4071727189,3983824440,2511468676,476442778],[665936716,2057846182,2599098892,1888772365,3598335121,4221964403,307755755,120055050],[108348787,3276346285,1639140278,484506537,1100977304,4166646806,1218410021,585287199],[3626353570,1418183212,1659678768,833976650,1845906870,4215164662,2135697063,229992803],[780136992,97124029,1704357389,2077494586,2326548487,3426395459,2409980738,595192037],[2932097620,943963965,2720192576,3787557228,2397081764,3136876124,2958533990,38186768],[1494529312,2998039088,3902842908,1854516005,1936903380,1929152138,2893760786,157456090],[3612551569,1109422315,3073821485,1542411469,2967971270,1267726703,3810020284,235342488],[286388225,117718976,1460896215,3313801848,4001373144,716482846,3426695146,374150747],[2898939,3610316273,1122955763,2790394561,3913978681,1889373603,2638176654,246852432],[2351708432,1542624306,3466740490,29226159,1804651958,1100552928,289137503,283862350],[1366561035,2039423275,970835158,3995470646,2234354888,3218033186,2190755012,308192598],[2085970951,803699463,4188227278,2231758000,2768751230,2431597297,2587912926,631862794],[3041555639,184850394,4256437878,2885595050,3953763015,1971585800,1388549769,502463090],[3760888406,1495102908,2841666441,1562926407,725527369,21612523,3963607388,479062616],[763657073,4218548568,2554293021,2534233316,1744691661,3745405061,2014156598,398798746],[2837679174,152702735,3845739464,394822517,59310439,1945699747,850942977,610390411],[4260305165,3061285857,1211373062,2145190609,669191237,3863127927,1225449501,122138671],[1462150065,2402942970,700844743,1966573249,3092323645,2393175328,253712286,332206082],[457507957,1523540397,2540051455,909890425,2129204440,3166555370,3264560724,574858379],[3006848663,477009198,2906430236,1394699473,1383302811,673331583,4011946572,112961187],[2704084017,2393955949,2485429363,3512547486,3244378123,2368412316,804893381,37266295],[153902605,895745787,1624260883,3961929897,1280197891,1053255589,3218974552,407168057],[3160495658,1215340195,366122876,754594200,137300606,2269457227,2578521820,760980137],[3196133437,3257660589,2513302268,2642322869,1891943478,321749559,2777079308,762022043],[1992066192,3916103080,1635595015,1731214420,1083020341,2558040717,718827634,377917622],[3519003543,753048075,564959064,1026582172,1343494919,3160610299,2634405102,520906950],[1282524638,304313654,1978620630,1009566376,2258310615,1599891775,2426837932,232186112],[974617781,2075238366,2025861364,1235064802,3452959188,979923136,2687951409,224699450],[1586161516,1065118620,814165240,1079300406,2981640283,561466307,3622895621,664935906],[1717204106,4221984387,2595987222,2644793820,3035556151,2508845779,3069816446,308724002],[3206002646,3624537743,4230845313,1280698419,1679762196,485336291,1142677326,78148980],[1751435566,3059542391,1016212742,1647793169,1416841379,800914140,1110785693,383763849]],"blinder":[4218236157,1169723001,840189036,749858618,2614452035,790338537,1480038371,148960380]}"#;

        let wallet = deserialize_wallet(wallet_str);
        dbg!(wallet);
    }
}
